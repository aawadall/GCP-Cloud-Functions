// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vaults.proto

package vaults

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Test new message type
type EventRequest struct {
	EventClass           string   `protobuf:"bytes,1,opt,name=event_class,json=eventClass,proto3" json:"event_class,omitempty"`
	AtmId                string   `protobuf:"bytes,2,opt,name=atm_id,json=atmId,proto3" json:"atm_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventRequest) Reset()         { *m = EventRequest{} }
func (m *EventRequest) String() string { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()    {}
func (*EventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7988568d0ba058b, []int{0}
}

func (m *EventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRequest.Unmarshal(m, b)
}
func (m *EventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRequest.Marshal(b, m, deterministic)
}
func (m *EventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequest.Merge(m, src)
}
func (m *EventRequest) XXX_Size() int {
	return xxx_messageInfo_EventRequest.Size(m)
}
func (m *EventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequest proto.InternalMessageInfo

func (m *EventRequest) GetEventClass() string {
	if m != nil {
		return m.EventClass
	}
	return ""
}

func (m *EventRequest) GetAtmId() string {
	if m != nil {
		return m.AtmId
	}
	return ""
}

type EventReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventReply) Reset()         { *m = EventReply{} }
func (m *EventReply) String() string { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()    {}
func (*EventReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7988568d0ba058b, []int{1}
}

func (m *EventReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventReply.Unmarshal(m, b)
}
func (m *EventReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventReply.Marshal(b, m, deterministic)
}
func (m *EventReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReply.Merge(m, src)
}
func (m *EventReply) XXX_Size() int {
	return xxx_messageInfo_EventReply.Size(m)
}
func (m *EventReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReply.DiscardUnknown(m)
}

var xxx_messageInfo_EventReply proto.InternalMessageInfo

func (m *EventReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*EventRequest)(nil), "vaults.EventRequest")
	proto.RegisterType((*EventReply)(nil), "vaults.EventReply")
}

func init() { proto.RegisterFile("vaults.proto", fileDescriptor_f7988568d0ba058b) }

var fileDescriptor_f7988568d0ba058b = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4b, 0x2c, 0xcd,
	0x29, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xdc, 0xb8, 0x78,
	0x5c, 0xcb, 0x52, 0xf3, 0x4a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xe4, 0xb9, 0xb8,
	0x53, 0x41, 0xfc, 0xf8, 0xe4, 0x9c, 0xc4, 0xe2, 0x62, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x2e, 0xb0, 0x90, 0x33, 0x48, 0x44, 0x48, 0x94, 0x8b, 0x2d, 0xb1, 0x24, 0x37, 0x3e, 0x33, 0x45,
	0x82, 0x09, 0x2c, 0xc7, 0x9a, 0x58, 0x92, 0xeb, 0x99, 0xa2, 0xa4, 0xc6, 0xc5, 0x05, 0x35, 0xa7,
	0x20, 0xa7, 0x52, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x15, 0x6a, 0x02,
	0x8c, 0x6b, 0x64, 0xcb, 0xc5, 0x06, 0x56, 0x57, 0x2c, 0x64, 0xcc, 0xc5, 0x0a, 0x66, 0x09, 0x89,
	0xe8, 0x41, 0x5d, 0x86, 0xec, 0x10, 0x29, 0x21, 0x34, 0xd1, 0x82, 0x9c, 0x4a, 0x25, 0x06, 0x27,
	0x35, 0x2e, 0xd1, 0xe4, 0x44, 0xbd, 0xb4, 0xcc, 0xbc, 0xf4, 0xfc, 0xa2, 0xcc, 0x92, 0x8c, 0xdc,
	0x62, 0xa8, 0x2a, 0x27, 0xee, 0x30, 0x30, 0x1d, 0x00, 0xf2, 0x5c, 0x00, 0x63, 0x12, 0x1b, 0xd8,
	0x97, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x15, 0x6e, 0x2d, 0xf5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventsClient interface {
	// Main Event Handler
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventReply, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/vaults.Events/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
type EventsServer interface {
	// Main Event Handler
	Event(context.Context, *EventRequest) (*EventReply, error)
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vaults.Events/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vaults.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _Events_Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vaults.proto",
}
